include "rsp_queue.inc"

#define SCREEN_WIDTH 320
#define SCREEN_HEIGHT 240
#define BUFF_SIZE_RGBA16 (SCREEN_WIDTH * SCREEN_HEIGHT * 2)
#define BUFF_SIZE_RGBA32 (SCREEN_WIDTH * SCREEN_HEIGHT * 4)

state
{
}

data
{
}

bss {
  u32 BUFF_IN_A[SCREEN_WIDTH];
  u32 BUFF_IN_B[SCREEN_WIDTH];
  vec16 TEMP_COLOR;
}

// DMA from RDRAM into DMEM
macro dmaInAsync(u32 addrRDRAM, u32 addrDMEM, u32 size)
{
  @Barrier("DMA") set_dma_addr_rsp(addrDMEM);
  @Barrier("DMA") set_dma_addr_rdram(addrRDRAM);
  @Barrier("DMA") set_dma_read(size);
}

// DMA from DMEM into RDRAM
macro dmaOutAsync(u32 addrRDRAM, u32 addrDMEM, u32 size)
{
  @Barrier("DMA") set_dma_addr_rsp(addrDMEM);
  @Barrier("DMA") set_dma_addr_rdram(addrRDRAM);
  @Barrier("DMA") set_dma_write(size);
}

 macro dmaAwait()
 {
   loop {
    RA = get_dma_busy();
    // DELAY SLOT
  } while(RA != 0)
 }

macro packRGBA16(vec16 out, vec16 in)
{
  in >>= 10;
  out = in * 2;
  out = VCONST_G +* in.yyyyYYYY;
  out = VCONST_R +* in.xxxxXXXX;
}

command<0> Cmd_HDRBloom(u32 ptrIn, u32 ptrOut, u16 factor)
{
  vec16 colFactor;
  colFactor.w = factor;

  vec16 VCONST_R = 1 << 11;
  vec16 VCONST_G = 1 << 6;

  dma_await();

  u32 ptrInEnd = ptrIn + BUFF_SIZE_RGBA32;
  u16 buffDMEM = BUFF_IN_A;

  loop {
    u32 dmaSize = (SCREEN_WIDTH * 4) - 1;
    u32 ptrDMEM = buffDMEM;

    dmaInAsync(ptrIn, ptrDMEM, dmaSize);

    ptrIn += SCREEN_WIDTH * 4;

    u32 dmemOut = BUFF_IN_B;
    u32 dmemIn = ptrDMEM;
    u32 dmemInEnd;

    loop {
      RA = get_dma_busy();
      // DELAY SLOT
      dmemInEnd = dmemIn + SCREEN_WIDTH*4;
    } while(RA != 0)

    loop {
      vec16 pixel0 = load_vec_u8(dmemIn, 0);
      vec16 pixel1 = load_vec_u8(dmemIn, 8);
      vec16 pixel2 = load_vec_u8(dmemIn, 16);
      vec16 pixel3 = load_vec_u8(dmemIn, 24);

      pixel1 >>= 6;
      pixel2 >>= 6;
      pixel3 >>= 6;
      pixel0 >>= 6;

      pixel0:sint *= colFactor.w;
      pixel1:sint *= colFactor.w;
      pixel2:sint *= colFactor.w;
      pixel3:sint *= colFactor.w;

      vec16 pixelOut0 = packRGBA16(pixel0);
      vec16 pixelOut1 = packRGBA16(pixel1);
      vec16 pixelOut2 = packRGBA16(pixel2);
      vec16 pixelOut3 = packRGBA16(pixel3);

      store(pixelOut0.z, dmemOut, 0);
      store(pixelOut0.Z, dmemOut, 2);
      store(pixelOut1.z, dmemOut, 4);
      store(pixelOut1.Z, dmemOut, 6);
      store(pixelOut2.z, dmemOut, 8);
      store(pixelOut2.Z, dmemOut, 10);
      store(pixelOut3.z, dmemOut, 12);
      store(pixelOut3.Z, dmemOut, 14);

      dmemIn += 32;
      dmemOut += 16;
    } while(dmemIn != dmemInEnd)

    u32 dmaSize = (SCREEN_WIDTH * 2) - 1;
    ptrDMEM = dmemOut - SCREEN_WIDTH * 2;
    dmaOutAsync(ptrOut, ptrDMEM, dmaSize);

    ptrOut += (SCREEN_WIDTH * 2);
  } while(ptrIn != ptrInEnd)
}