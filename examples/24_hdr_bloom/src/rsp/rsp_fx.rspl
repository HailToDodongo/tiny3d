include "rsp_queue.inc"

#define SCREEN_WIDTH 320
#define SCREEN_HEIGHT 240
#define SCREEN_STRIDE (SCREEN_WIDTH * 4)
#define BUFF_SIZE_RGBA16 (SCREEN_WIDTH * SCREEN_HEIGHT * 2)
#define BUFF_SIZE_RGBA32 (SCREEN_WIDTH * SCREEN_HEIGHT * 4)

#define BLUR_WIDTH 80
#define BLUR_HEIGHT 60
#define BLUR_STRIDE (BLUR_WIDTH * 4)
#define BLUR_STRIDE_PADDED (BLUR_WIDTH * 4 + 32)

bss {
  extern vec16 RSPQ_SCRATCH_MEM;

  u32 BUFF_IN_A[SCREEN_WIDTH];
  u32 BUFF_IN_B[SCREEN_WIDTH];

  alignas(8)
  vec16 SAFE_SPACE_0;
  u32 BUFF_BLOOM[BLUR_WIDTH];
  vec16 SAFE_SPACE_1;
  vec16 SAFE_SPACE_2;
  u32 BUFF_BLOOM_B[BLUR_WIDTH];
  vec16 SAFE_SPACE_3;
}

// DMA from RDRAM into DMEM
macro dmaInAsync(u32 addrRDRAM, u32 addrDMEM, u32 size)
{
  @Barrier("DMA") set_dma_addr_rsp(addrDMEM);
  @Barrier("DMA") set_dma_addr_rdram(addrRDRAM);
  @Barrier("DMA") set_dma_read(size);
}

// DMA from DMEM into RDRAM
macro dmaOutAsync(u32 addrRDRAM, u32 addrDMEM, u32 size)
{
  @Barrier("DMA") set_dma_addr_rsp(addrDMEM);
  @Barrier("DMA") set_dma_addr_rdram(addrRDRAM);
  @Barrier("DMA") set_dma_write(size);
}

 macro dmaAwait()
 {
   loop {
    RA = get_dma_busy();
    // DELAY SLOT
  } while(RA != 0)
 }

macro pixelApplyHDR(vec16 pixel)
{
  asm_op("vmudm", VTEMP, pixel, bloomFactorA.W);
  asm_op("vmadh", pixel, pixel, bloomFactorA.w);
}

/**
 * Combines the HDR image input (320x240, RGBA32), with a 4:1 bloom buffer (80x60, RGBA32),
 * and outputs it into to the final buffer shown by VI (320x240, RGBA16).
 * The input color is also mapped from HDR to a standard range.
 *
 * @param ptrIn 320x240 RGBA32 image
 * @param ptrOut 320x240 RGBA16 output buffer
 * @param ptrBloom 80x60 RGBA32 blurred bloom buffer
 * @param factor s16.16 factor for exposure, mapping HDR to standard range.
 */
command<0> Cmd_HDRBloom(u32 ptrIn, u32 ptrOut, u32 ptrBloom, u32 factor)
{
  vec16 VCONST_RGB; // mask to only keep 5 bits from a fraction, used for RGBA16 conversion
  VCONST_RGB.x = 0b0'11111'00000'00000;

  u32 ptrInEnd = ptrIn + BUFF_SIZE_RGBA32;
  u16 buffDMEM = BUFF_IN_A;

  // 0-3, which row are we on in the interpolated bloom buffer
  u8 bloomPhase = 0;
  vec16 bloomFactorY = 0;

  vec16 bloomFactorA = 0;
  bloomFactorA:sfract.X = 0.25;
  bloomFactorA.Y = bloomFactorA.X;
  bloomFactorA.Z = bloomFactorA.X;

  u16 factorU16 = factor >> 16;
  s32 sumRGB;

  // wait for all pending DMAs to finish
  loop {
    RA = get_dma_busy();
    sumRGB = 0;
    bloomFactorA.w = factorU16;
    bloomFactorA.W = factor:u16;
  } while(RA != 0)

  // Now go line by line through the input image
  // The bloom buffer needs to only lod every 4 lines, since it is lower res
  loop {
    u32 dmaSize = SCREEN_STRIDE - 1;
    u32 ptrDMEM = buffDMEM;

    dmaInAsync(ptrIn, ptrDMEM, dmaSize);

    u16 dmemBloom = BUFF_BLOOM;

    // first line of a new 4-line group, fetch next 2 bloom lines
    // this will re-fetch the current second line as the first one
    // but requires less logic later on
    if(bloomPhase == 0) {
      u16 bloomDmaSize;
      loop {
        RA = get_dma_busy();
        bloomPhase = 4;
        bloomFactorY = VZERO - 0x2000;
        bloomDmaSize = BLUR_STRIDE*2;
      } while(RA != 0)

      dmaInAsync(ptrBloom, dmemBloom, bloomDmaSize);
      ptrBloom += BLUR_STRIDE;
    }

    bloomPhase -= 1;
    ptrIn += SCREEN_STRIDE;

    u32 dmemIn, dmemOut;
    u32 dmemInEnd;

    bloomFactorY += 0x2000;

    loop {
      RA = get_dma_busy();
      dmemOut = BUFF_IN_B;
      dmemIn = ptrDMEM;
      dmemInEnd = ptrDMEM + SCREEN_WIDTH*4;
    } while(RA != 0)

    vec16 bloom0, bloom1, bloom2, bloom3;
    vec16 bloom0Next, bloom2Next;

    u16 tmpMemA = RSPQ_SCRATCH_MEM;
    u16 tmpMemB = tmpMemA + 1;
    u16 tmpMemC = tmpMemA + 2;

    vec16 pixelOut;
    vec16 pixelR, pixelG, pixelB;

    bloom0 = load_vec_u8(dmemBloom, 0);
    bloom0Next = load_vec_u8(dmemBloom, 320);

    bloom2 = load_vec_u8(dmemBloom, 8);
    bloom2Next = load_vec_u8(dmemBloom, 328);

    dmemBloom += 8;

    vec16 diffY_A = bloom0Next - bloom0;
    vec16 diffY_B = bloom2Next - bloom2;

    vec16 pixel0 = load_vec_u8(dmemIn, 0);
    pixelApplyHDR(pixel0);


    loop {
      vec16 pixel1 = load_vec_u8(dmemIn, 8);
      vec16 pixel2 = load_vec_u8(dmemIn, 16);
      vec16 pixel3 = load_vec_u8(dmemIn, 24);

      // finish conversion to RGBA16, values are already masked, so just shift and accumulate.
      // the final result is a vector where each lane holds a RGBA16 value in order
      pixelOut = pixelR:uint * 2;
      asm_op("vmadl", pixelOut, pixelG, VSHIFT8.w);
      asm_op("vmadl", pixelOut, pixelB, VSHIFT.x);

      // interpolate bloom vertically
      bloom0:sint = bloom0:sint * 1;
      bloom0:sfract = diffY_A:sfract +* bloomFactorY:sfract;

      // final output of HDR-adjusted color + Bloom
      store(pixelOut, dmemOut, -16);

      bloom2:sint = bloom2:sint * 1;
      bloom2:sfract = diffY_B:sfract +* bloomFactorY:sfract;

      pixelApplyHDR(pixel1);

      // bloom0 now contains 2 pixels in xyzw and XYZW, so viewing the register as two halves: [A, B]
      // in order to do horizontal interpolation we have to LERP 3 values in between A and B (X0, X1, X2)
      // and organize the data so that that span across 2 registers to be added onto the color value later on
      // So we need to transform [A,B] into [A, X0] [X1, X2], B gets thrown away since it is the next starting pixel
      @Barrier("tmp_0") store(bloom0, RSPQ_SCRATCH_MEM, 0);
      @Barrier("tmp_2") store(bloom2.xyzw, RSPQ_SCRATCH_MEM, 24);

      @Barrier("tmp_2") bloom2Next = bloom2;
      @Barrier("tmp_0") bloom2 = bloom0;

      @Barrier("tmp_0") bloom0.XYZW = load(RSPQ_SCRATCH_MEM, 0).xyzw;
      @Barrier("tmp_0") bloom2.xyzw = load(RSPQ_SCRATCH_MEM, 8).xyzw;
      @Barrier("tmp_2") bloom2Next.XYZW = load(RSPQ_SCRATCH_MEM, 24).xyzw;

      pixelApplyHDR(pixel2);

      // Debug Bloom:
      //pixel0 = 0; pixel1 = 0; pixel2 = 0; pixel3 = 0;

      vec16 diffX_A = bloom2 - bloom0;
      pixelApplyHDR(pixel3);

      vec16 diffX_A_first, diffX_B_first;
      // Now add the interpolated differences onto the first bloom pixel
      // this will create the final interpolated value.
      // Since we start a MAC sequence with it, add the HDR-adjusted FB color on top too
      bloom1:sint = bloom0:sint * 1;
      diffX_A_first:sfract = diffX_A:sfract +* bloomFactorA:sfract; // -> *0.00 and 0.25
      bloom1:sfract = diffX_A:sfract +* 0x4000; // add again by 0.5 -> *0.50 and *0.75
      pixel1:sint = pixel1:sint +* 1;

      vec16 diffX_B = bloom2Next - bloom2;

      // now take the captured "bloom + diff*X" from  diffX_A_first
      pixel0:sint = diffX_A_first:sint + pixel0:sint;

      bloom3:sint = bloom2:sint * 1;
      diffX_B_first:sfract = diffX_B:sfract +* bloomFactorA:sfract;
      bloom3:sfract = diffX_B:sfract +* 0x4000; // add again by 0.5 -> *0.50 and *0.75
      pixel3:sint = pixel3:sint +* 1;

      pixel2:sint = diffX_B_first:sint + pixel2:sint;

      // accumulate RGB sum of 2 pixels for the average image brightness
      // we do this in SUs here, since there are a lot of VUs to fill
      {
        u8 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
        tmp0 = load(tmpMemA, 8);
        tmp1 = load(tmpMemA, 9);
        tmp2 = load(tmpMemA, 10);
        tmp3 = load(tmpMemA, 24);
        tmp4 = load(tmpMemA, 25);
        tmp5 = load(tmpMemA, 26);
        sumRGB += tmp0 + tmp1 + tmp2 + tmp3 + tmp4 + tmp5;
      }
      {
          // Store as [RGBA RGBA RGBA RGBA  RGBA RGBA RGBA RGBA]
          @Barrier("rgba16") store_vec_u8(pixel0, tmpMemA, 0);
          @Barrier("rgba16") store_vec_u8(pixel1, tmpMemA, 8);
          @Barrier("rgba16") store_vec_u8(pixel2, tmpMemA, 16);
          @Barrier("rgba16") store_vec_u8(pixel3, tmpMemA, 24);

          pixel0 = load_vec_u8(dmemIn, 32);
          pixelApplyHDR(pixel0);

          // Now load each component into a vector
          // "lfv" will load every 4th byte, starting from tmpMem
          // So [R0 R1 ... R6 R7] [G0 G1 ... G6 G7] [B0 B1 ... B6 B7]
          @Barrier("rgba16")
          asm_op("lfv", pixelR, 0,  0, tmpMemA);
          @Barrier("rgba16")
          asm_op("lfv", pixelR, 8, 16, tmpMemA);
          pixelR &= VCONST_RGB.x;

          @Barrier("rgba16")
          asm_op("lfv", pixelG, 0,  0, tmpMemB);
          @Barrier("rgba16")
          asm_op("lfv", pixelG, 8, 16, tmpMemB);
          pixelG &= VCONST_RGB.x;

          @Barrier("rgba16")
          asm_op("lfv", pixelB, 0,  0, tmpMemC);
          @Barrier("rgba16")
          asm_op("lfv", pixelB, 8, 16, tmpMemC);
          // Note: pixelB needs no mask as it only flows into the unused alpha channel
      }

      bloom0 = load_vec_u8(dmemBloom, 0);
      bloom2 = load_vec_u8(dmemBloom, 8);
      bloom2Next = load_vec_u8(dmemBloom, 328);

      dmemBloom += 8;

      diffY_A = diffY_B;
      diffY_B = bloom2Next - bloom2;

      dmemIn += 32;
      dmemOut += 16;

    } while(dmemIn != dmemInEnd)

    pixelOut = pixelR:uint * 2;
    asm_op("vmadl", pixelOut, pixelG, VSHIFT8.w);
    asm_op("vmadl", pixelOut, pixelB, VSHIFT.x);

    store(pixelOut.xyzw, dmemOut, -16);
    store(VZERO.xy, dmemOut, -8);

    u32 dmaSize = (SCREEN_WIDTH * 2) - 1;
    ptrDMEM = dmemOut - SCREEN_WIDTH * 2;
    dmaOutAsync(ptrOut, ptrDMEM, dmaSize);

    ptrOut += (SCREEN_WIDTH * 2);
  } while(ptrIn != ptrInEnd)

  // DMA back the final intensity into the bloom buffer
  store(sumRGB, buffDMEM, 0);
  u16 dmaSize = 8 - 1;
  dmaOutAsync(ptrIn, buffDMEM, dmaSize);
}

/**
 * Starts a chain of multiple kernel MAC sequences.
 * Each kernel can re-use part of the multiplication from the last one.
 * This intermediate result is stored in tempOut, whereas the final one is in sum.
 *
 * @param sum
 * @param factor
 * @param pixel00...pixel21
 * @param tempOut
 */
macro sum4x3_chainStart(
  vec16 sum, vec16 factor,
  vec16 pixel00, vec16 pixel10, vec16 pixel20,
  vec16 pixel01, vec16 pixel11, vec16 pixel21,
  vec16 tempOut
)
{
  sum:ufract = pixel01:ufract  * factor:ufract.x;
  sum:ufract = pixel11:ufract +* factor:ufract.x;
  tempOut:ufract = pixel21:ufract +* factor:ufract.x;

  sum:ufract = pixel00:ufract +* factor:ufract.x;
  sum:ufract = pixel10:ufract +* factor:ufract.x;
  sum:ufract = pixel20:ufract +* factor:ufract.x;
}

/**
 * Continues a chain of multiple kernel MACs started by sum4x3_chainStart.
 * This is the same function, except it takes in the last intermediate result too.
 *
 * @param sum final result of the kernel
 * @param factor
 * @param pixel01...pixel21
 * @param tempIn last first half of the kernel
 * @param tempOut next intermediate result of the kernel
 */
macro sum4x3_chain(
  vec16 sum, vec16 factor,
  vec16 pixel01, vec16 pixel11, vec16 pixel21,
  vec16 tempIn, vec16 tempOut
)
{
  sum:ufract = pixel01:ufract  * factor:ufract.x;
  sum:ufract = pixel11:ufract +* factor:ufract.x;
  tempOut:ufract = pixel21:ufract +* factor:ufract.x;
  sum:sint = tempIn:sint +* 1;
}

// clamps the brightness, this is used to implement a bloom-threshold
macro clampBrightness(vec16 pixel)
{
  tmp = pixel < VTEMP.y;
  pixel = select(VZERO, pixel);
}

/**
 * Blurs a given image with a basic 4x3 box-blur
 * @param ptrRDRAMIn input 80x60 RGBA32 image
 * @param ptrRDRAMOut output 80x60 RGBA32 image
 * @param thresholdBrightness threshold as fractional
 */
command<1> Cmd_Blur(u32 ptrRDRAMIn, u32 ptrRDRAMOut, u16 thresholdBrightness)
{
  u32 ptrRDRAMInEnd = ptrRDRAMIn + (BLUR_STRIDE * (BLUR_HEIGHT - 1));
  u32 rowsLeft = BLUR_HEIGHT;

  u16 dmaSize = (BLUR_WIDTH * 4) - 1;
  u16 dmemInOffset = 0;
  u16 dmemInOffsetEnd = BLUR_STRIDE_PADDED * 3;

  VTEMP.x = thresholdBrightness;
  thresholdBrightness >>= 16;
  VTEMP.y = thresholdBrightness;

  u16 dmemInA;
  u32 dmemOutStart;
  u16 lastLoadedDmemIn;

  loop { // DMA Await
    RA = get_dma_busy();
    dmemInA = BUFF_IN_A;
    dmemOutStart = dmemInA + (BLUR_STRIDE_PADDED*3) + 16;
    lastLoadedDmemIn = dmemInA;
  } while(RA != 0)

  // Preload the first 3 lines, since we clamp this is two times the first one
  // and lastly the second row
  dmaInAsync(ptrRDRAMIn, dmemInA, dmaSize);
  dmemInA += BLUR_STRIDE_PADDED;
  dmaAwait();

  dmaInAsync(ptrRDRAMIn, dmemInA, dmaSize);
  dmemInA += BLUR_STRIDE_PADDED;
  ptrRDRAMIn += BLUR_STRIDE;
  dmaAwait();

  dmaInAsync(ptrRDRAMIn, dmemInA, dmaSize);
  ptrRDRAMIn += BLUR_STRIDE;
  dmaAwait();

  // dupe the last pixel of all 3 rows, to safely sample OOB
  u32 tmp1 = load(dmemInA, 316);
  store(tmp1, dmemInA, 320);

  dmemInA -= BLUR_STRIDE_PADDED;
  u32 tmp2 = load(dmemInA, 316);
  store(tmp2, dmemInA, 320);

  // last pixel is handled in the loop each iteration

  undef tmp1;
  undef tmp2;
  // the first threshold check needs to process 3 lines
  u16 thresholdStride = BLUR_STRIDE * 3;

  vec16 maskR = 0;
  maskR.x = 1;
  vec16 maskG = 0;
  maskG.y = 1;
  vec16 maskB = 0;
  maskB.z = 1;

  vec16 maskR1 = 0;
  maskR1.X = 1;
  vec16 maskG1 = 0;
  maskG1.Y = 1;
  vec16 maskB1 = 0;
  maskB1.Z = 1;


  loop {
    u32 dmemOutCurr, dmemOutEnd;
    u16 dmemInBOffset;

    loop {
      RA = get_dma_busy();
      dmemInA = BUFF_IN_A;
      dmemInA += 4;

      dmemOutCurr = dmemOutStart; // DELAY SLOT
      dmemInBOffset = BLUR_STRIDE_PADDED;
    } while(RA != 0)

    u16 dmemInC = dmemInA + BLUR_STRIDE_PADDED*2;

    vec16 sumA, sumB, sumC;
    sumA = 0;

    if(thresholdBrightness)
    {
      vec16 tmp;
      u16 ptrClamp = lastLoadedDmemIn;
      u16 ptrClampEnd; // = lastLoadedDmemIn + thresholdStride;

      loop {
        thresholdStride = BLUR_STRIDE; // reset to 1 line per newly processed line
        ptrClampEnd = lastLoadedDmemIn + thresholdStride;

        vec16 p0 = load_vec_u8(ptrClamp, 0);
        vec16 p1 = load_vec_u8(ptrClamp, 8);
        vec16 p2 = load_vec_u8(ptrClamp, 16);
        vec16 p3 = load_vec_u8(ptrClamp, 24);
        vec16 p4 = load_vec_u8(ptrClamp, 32);
        vec16 p5 = load_vec_u8(ptrClamp, 40);
        vec16 p6 = load_vec_u8(ptrClamp, 48);
        vec16 p7 = load_vec_u8(ptrClamp, 56);
        vec16 p8 = load_vec_u8(ptrClamp, 64);
        vec16 p9 = load_vec_u8(ptrClamp, 72);

        clampBrightness(p0);
        clampBrightness(p1);
        clampBrightness(p2);
        clampBrightness(p3);
        clampBrightness(p4);
        clampBrightness(p5);
        clampBrightness(p6);
        clampBrightness(p7);
        clampBrightness(p8);
        clampBrightness(p9);

        store_vec_u8(p0, ptrClamp, 0);
        store_vec_u8(p1, ptrClamp, 8);
        store_vec_u8(p2, ptrClamp, 16);
        store_vec_u8(p3, ptrClamp, 24);
        store_vec_u8(p4, ptrClamp, 32);
        store_vec_u8(p5, ptrClamp, 40);
        store_vec_u8(p6, ptrClamp, 48);
        store_vec_u8(p7, ptrClamp, 56);
        store_vec_u8(p8, ptrClamp, 64);
        store_vec_u8(p9, ptrClamp, 72);

        ptrClamp += 80;
      } while(ptrClamp != ptrClampEnd)
    }


    { // dupe the last pixel one beyond to safely sample OOB
      u32 tmp1 = load(lastLoadedDmemIn, 316);
      store(tmp1, lastLoadedDmemIn, 320);
    }

    vec16 tmpA, tmpB;

    ptrRDRAMOut += BLUR_STRIDE;
    dmemOutEnd = dmemOutStart + BLUR_STRIDE;

    vec16 res0, res1;

    vec16 pixel_y0_x0  = load_vec_u8(dmemInA, 0);
    vec16 pixel_y0_x2  = load_vec_u8(dmemInA, 8);

    vec16 pixel_y1_x0 = load_vec_u8(dmemInA, 360);
    vec16 pixel_y1_x2 = load_vec_u8(dmemInA, 368);

    vec16 pixel_y2_x0 = load_vec_u8(dmemInC, 0);
    vec16 pixel_y2_x2 = load_vec_u8(dmemInC, 8);


    loop {
      u16 temp = RSPQ_SCRATCH_MEM;
      store_vec_u8(res0, dmemOutCurr, -16);
      store_vec_u8(res1, dmemOutCurr, -8);

      // Now apply a basic 3x3 kernel, by doing a weighted sum.
      // since we (have to) load 4 pixel horizontally, we can do 2 output pixels at once.
      // Where the two kernels overlap by 2 pixel in the middle.

      sumC:ufract = pixel_y0_x2:ufract  * VTEMP:ufract.x;
      sumC:ufract = pixel_y1_x2:ufract +* VTEMP:ufract.x;
      sumC:ufract = pixel_y2_x2:ufract +* VTEMP:ufract.x;

      @Barrier("group2") store(sumC.xyzw, temp, 8);

      // first sum all horizontally
      sumB:ufract = pixel_y0_x0:ufract  * VTEMP:ufract.x;
      sumB:ufract = pixel_y1_x0:ufract +* VTEMP:ufract.x;
      sumB:ufract = pixel_y2_x0:ufract +* VTEMP:ufract.x;

      @Barrier("group2") store(sumB.XYZW, temp, 0);

      // Now perform 2 final sums, once for the left-most 3 pixel, one for the right-most 3 pixel.
      // So with: sumA = [0,1] sumB = [2,3] sumC = [4,5]
      // We want: res = [avg(0,1,2), avg(1,2,3), avg(2,3,4), avg(3,4,5)]
      res0:sint = maskR:sint +* sumA:sint.X;
      res0:sint = maskG:sint +* sumA:sint.Y;
      res0:sint = maskB:sint +* sumA:sint.Z;

      res0:sint = maskR1:sint +* sumB:sint.x;
      res0:sint = maskG1:sint +* sumB:sint.y;
      res0:sint = maskB1:sint +* sumB:sint.z;

      res0:sint = sumA:sint +* 1;

      vec16 group2;
      @Barrier("group2") group2 = load(temp, 0);

      res1:sint = sumB:sint * 1;
      res1:sint = sumC:sint +* 1;
      res1:sint = group2:sint +* 1;

      sumA = sumC;

      dmemInA += 16;
      dmemInC += 16;

      // Load 4 pixels horizontally, 3 pixels vertically
      pixel_y0_x0 = load_vec_u8(dmemInA, 0); // 2 pixel each
      pixel_y0_x2 = load_vec_u8(dmemInA, 8);

      pixel_y1_x0 = load_vec_u8(dmemInA, 352);
      pixel_y1_x2 = load_vec_u8(dmemInA, 360);

      pixel_y2_x0 = load_vec_u8(dmemInC, 0);
      pixel_y2_x2 = load_vec_u8(dmemInC, 8);

      dmemOutCurr += 16;
    } while(dmemOutCurr != dmemOutEnd)

    store_vec_u8(res0, dmemOutCurr, -16);
    store_vec_u8(res1, dmemOutCurr, -8);

    // Write out current blurred data
    dmaOutAsync(ptrRDRAMOut, dmemOutStart, dmaSize);
    rowsLeft -= 1;

    loop {
      RA = get_dma_busy();
      lastLoadedDmemIn = dmemInOffset + BUFF_IN_A;
    } while(RA != 0)

    if(rowsLeft == 0)exit;

    // Load in next source image line
    dmaInAsync(ptrRDRAMIn, lastLoadedDmemIn, dmaSize);
    dmemInOffset += BLUR_STRIDE_PADDED;

    if(ptrRDRAMIn != ptrRDRAMInEnd) {
      ptrRDRAMIn += BLUR_STRIDE;
    }

    if(dmemInOffset == dmemInOffsetEnd) {
      dmemInOffset = 0;
    }
  }
}

macro sum4x2_X(
  vec16 a, vec16 b, vec16 c, vec16 d
)
{
  a:sfract = a:sfract * sumFactor:sfract.x;
  a:sfract = b:sfract +* sumFactor:sfract.x;
  a:sfract = c:sfract +* sumFactor:sfract.x;
  a:sfract = d:sfract +* sumFactor:sfract.x;
}

macro sum4x2_Y_Mem(vec16 res, vec16 a)
{
  res.xyzw = a.XYZW;
  res:sint = res:sint + a:sint;
}

command<2> Cmd_Downscale(u32 ptrRDRAMIn, u32 prtRDRAMOut)
{
  //ptrRDRAMIn += SCREEN_STRIDE;
  u32 ptrRDRAMInEnd = ptrRDRAMIn + BUFF_SIZE_RGBA32;

  prtRDRAMOut -= BLUR_STRIDE;

  u16 dmaSizeIn = (
    (SCREEN_STRIDE << 20) // skip
    | (1 << 12) // rows
    | (SCREEN_STRIDE - 1) // size
  );
  u16 dmaSizeOut = BLUR_STRIDE - 1;

  vec16 sumFactor;
  sumFactor:sfract.x = 0.125;

  u16 dmemOutA = BUFF_BLOOM;
  u16 dmemOutB = BUFF_BLOOM_B;
  u16 dmemOut;

  loop {
    u16 dmemInA, dmemInB;
    u16 dmemOutEnd;

    loop {
      RA = get_dma_busy();
      dmemInA = BUFF_IN_A;
      dmemInB = BUFF_IN_B;
    } while(RA != 0)

    // Load next source-image lines, while we do a 4-to-1 scale
    // we skip every second line and only LERP two later one
    dmaInAsync(ptrRDRAMIn, dmemInA, dmaSizeIn);
    ptrRDRAMIn += SCREEN_STRIDE * 4;

    loop {
      RA = get_dma_busy();

      dmemOut = dmemOutA;
      dmemOutEnd = dmemOut + BLUR_STRIDE;
    } while(RA != 0)

    dmaOutAsync(prtRDRAMOut, dmemOutB, dmaSizeOut);
    swap(dmemOutA, dmemOutB);

    // dupe last pixel
    {
      dmemInA += 1280;
      dmemInB += 1280;

      vec16 a = load(dmemInA, -32);
      store(a, dmemInA, -16);

      dmemInA -= 1280;
      dmemInB -= 1280;
    }

    vec16 resA, resB;
    vec16 p0_AB, p0_CD, p0_EF, p0_GH;
    vec16 p1_AB, p1_CD, p1_EF, p1_GH;
    vec16 p2_AB, p2_CD, p2_EF, p2_GH;
    vec16 p3_AB, p3_CD, p3_EF, p3_GH;

    loop {
      resA:sint = p0_AB:sint + p1_AB:sint;
      resB:sint = p2_AB:sint + p3_AB:sint;

      // threshold for color, used to clamp bloom before blurring
      resA = resA < sumFactor.y ? VZERO : resA;
      resB = resB < sumFactor.y ? VZERO : resB;

      store_vec_u8(resA, dmemOut, -16);
      store_vec_u8(resB, dmemOut, -8);

      /**
       * This Loads 4x2 Pixels like so:
       * [A] [B] [C] [D]
       * [E] [F] [G] [H]
       */
      p0_AB = load_vec_u8(dmemInA, 0);
      p0_CD = load_vec_u8(dmemInA, 8);
      p0_EF = load_vec_u8(dmemInB, 0);
      p0_GH = load_vec_u8(dmemInB, 8);

      p1_AB = load_vec_u8(dmemInA, 16);
      p1_CD = load_vec_u8(dmemInA, 24);
      p1_EF = load_vec_u8(dmemInB, 16);
      p1_GH = load_vec_u8(dmemInB, 24);

      p2_AB = load_vec_u8(dmemInA, 32);
      p2_CD = load_vec_u8(dmemInA, 40);
      p2_EF = load_vec_u8(dmemInB, 32);
      p2_GH = load_vec_u8(dmemInB, 40);

      p3_AB = load_vec_u8(dmemInA, 48);
      p3_CD = load_vec_u8(dmemInA, 56);
      p3_EF = load_vec_u8(dmemInB, 48);
      p3_GH = load_vec_u8(dmemInB, 56);

     /**
      * take average in groups of 2 pixels at once:
      * [A] [B] [C] [D]
      * [E] [F] [G] [H] -> [ACEG] [BDFH]
      */
      sum4x2_X(p0_AB, p0_CD, p0_EF, p0_GH);
      sum4x2_X(p1_AB, p1_CD, p1_EF, p1_GH);
      sum4x2_X(p2_AB, p2_CD, p2_EF, p2_GH);
      sum4x2_X(p3_AB, p3_CD, p3_EF, p3_GH);

      @Barrier("tmp0") store(p0_AB.XYZW, dmemInA, 0);
      @Barrier("tmp0") p0_AB.X = p1_AB.x;
      @Barrier("tmp0") p0_AB.Y = p1_AB.y;
      @Barrier("tmp0") p0_AB.Z = p1_AB.z;
      @Barrier("tmp0") p1_AB.xyzw = load(dmemInA, 0).xyzw;

      @Barrier("tmp1") store(p2_AB.XYZW, dmemInA, 8);
      @Barrier("tmp1") p2_AB.X = p3_AB.x;
      @Barrier("tmp1") p2_AB.Y = p3_AB.y;
      @Barrier("tmp1") p2_AB.Z = p3_AB.z;
      @Barrier("tmp1") p3_AB.xyzw = load(dmemInA, 8).xyzw;

      dmemOut += 16;
      dmemInA += 64;
      dmemInB += 64;
      prtRDRAMOut += 16;

    } while(dmemOut != dmemOutEnd)

    resA:sint = p0_AB:sint + p1_AB:sint;
    resB:sint = p2_AB:sint + p3_AB:sint;

    store_vec_u8(resA, dmemOut, -16);
    store_vec_u8(resB, dmemOut, -8);

  } while(ptrRDRAMIn != ptrRDRAMInEnd)

  dmaOutAsync(prtRDRAMOut, dmemOutB, dmaSizeOut);
}