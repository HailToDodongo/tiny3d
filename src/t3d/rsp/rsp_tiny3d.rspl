/***************************************
 *  _____ _             _____ ____     *
 * |_   _(_)_ __  _   _|___ /|  _ \    *
 *   | | | | '_ \| | | | |_ \| | | |   *
 *   | | | | | | | |_| |___) | |_| |   *
 *   |_| |_|_| |_|\__, |____/|____/    *
 *                |___/                *
 *      3D-microcode for libdragon     *
 *                                     *
 * @copyright Max Beb√∂k 2023-2024      *
 * @license MIT                        *
 ***************************************/

#define TRI_BUFFER_COUNT 70
#define LIGHT_COUNT 8

// settings for RDPQ_Triangle
#define RDPQ_TRIANGLE_CUSTOM_VTX 1
#define VTX_ATTR_XY          0x00
#define VTX_ATTR_Z           0x04
#define VTX_ATTR_CLIPFLAGS   0x06
#define VTX_ATTR_REJFLAGS    0x07
#define VTX_ATTR_RGBA        0x08
#define VTX_ATTR_ST          0x0C
#define VTX_ATTR_CLIPPOSi    0x10
#define VTX_ATTR_Wi          0x16
#define VTX_ATTR_CLIPPOSf    0x18
#define VTX_ATTR_Wf          0x1E
#define VTX_ATTR_INVWi       0x20
#define VTX_ATTR_INVWf       0x22

#define RDPQ_TRIANGLE_VTX1 a0
#define RDPQ_TRIANGLE_VTX2 a1
#define RDPQ_TRIANGLE_VTX3 a2

#define RDPQ_TRIANGLE_VTX1_DMEM 0,v1
#define RDPQ_TRIANGLE_VTX2_DMEM 4,v1
#define RDPQ_TRIANGLE_VTX3_DMEM 2,v1

// Size of the internal triangle format
// @TODO: add const expr. eval to RSPL
#define TRI_SIZE   36
#define TRI_SIZE_2 72
#define TRI_SIZE_3 108

#define RDP_CMD_MAX_SIZE 176

// Single light (RGBA duplicated, duplicated direction packed as s8)
#define LIGHT_SIZE 16
#define MATRIX_SIZE 0x40

// Debug-Flag, used to measure performance excl. triangle draws
#define DRAW_TRIS 1
// Debug-Flag, enables metrics on how many tris are drawn & clipped
//#define DEBUG_LOG_TRIS 1

// RDPQ Stuff (@TODO: move RDPQ_Send back into libdragon)
#define DP_STATUS_END_VALID 512
#define RDPQ_DYNAMIC_BUFFER_SIZE 65536

include "rsp_queue.inc"
include "rdpq_macros.h"
include "./rspq_triangle.inc"

state
{
  // external libdragon labels
  extern u32 RDPQ_OTHER_MODES;
  extern u16 RSPQ_Loop;
  extern u16 RSPQ_SCRATCH_MEM;
  extern u16 CLIPPING_CODE_TARGET;

  alignas(8) vec16 MATRIX_PROJ[4];   // projection matrix
  alignas(8) vec16 MATRIX_MVP[4];    // view * model * projection
  alignas(8) u8 MATRIX_NORMAL[24]; // fractional normal matrix (@TODO: only needs 1.5 vec16's)

  /**
   * Buffer format (RDPQ_Triangle compatible):
   *
   *   Type |     Name  | Offset
   * -------+-----------+--------
   * s16[2] | Pos-XY    | 0x00
   * s16    | Depth     | 0x04
   * u8     | Clip-Code | 0x06
   * u8     | Rej. Code | 0x07
   * u8[4]  | Color     | 0x08
   * s16[2] | UV        | 0x0C
   * s16[3] | Clip-Pos  | 0x10  (t3d specific)
   * s16    | W         | 0x16
   * f16[3] | Clip-Pos  | 0x18  (t3d specific)
   * f16    | W         | 0x1E
   * s16.16 | InvW      | 0x20
   * -------+-----------+-0x24---
   */
  u8 TRI_BUFFER[TRI_BUFFER_COUNT][TRI_SIZE];

  // Temp. buffer for clipped extra vertices.
  // This is also used as a temp. buffer for DMA'ing in new vertices.
  // For clipping data, the format is the same as TRI_BUFFER.
  alignas(16)
  u8 CLIP_BUFFER_TMP[7][TRI_SIZE];

  // NOTE: this space must stay empty to allow overflows into the next buffer!

  // Last buffer where final clipping triangles are stored.
  // During clipping, vertices alternate between CLIP_BUFFER_TMP & B.
  alignas(16)
  u8 CLIP_BUFFER_RESULT[8][TRI_SIZE];

  vec16 SCREEN_SCALE_OFFSET = {
    0, 0, 0,           0, // screen size scale (.xyzw)
    0, 0, 0x3FFF, 0x00FF  // screen size offset (.XYZW), W is used for a fake clipping-code in 'triToScreenSpace'
  };

  vec16 NORMAL_MASK_SHIFT = {
    // Mask to extract 5.6.5-bit values for normal vectors (.xyzw)
    0b11111'000000'00000,
    0b00000'111111'00000,
    0b00000'000000'11111,
    0,
    // And the mul. factor to shift them into a fraction (.XYZW)
    1, 32, 2048, 0
  };

  // Plane-normals for clipping, the guard value can be overwritten with a command.
  alignas(8) s8 CLIPPING_PLANES[5][4] = {
  // X  Y  Z | guard
     1, 0, 0,   1,
     0, 1, 0,   1,
     0, 0, 1,   1,
     1, 0, 0,  -1,
     0, 1, 0,  -1
  };

  u16 UV_GEN_PARAMS[2] = {0, 0}; // user defined args. for the UV function

  // scales clip-space W to be 1 in the middle of near to far
  // the `0` are set at runtime to a fractional value
  alignas(8) vec16 NORM_SCALE_W = {
    0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
    0x0000, 0x0000, 0x0000, 0xFFFF
  };

  u32 SEGMENT_TABLE[8] = {0};

  // Lighting
  u32 COLOR_AMBIENT[2];   // RGBA8 (duplicated) | <unused> (saved IMEM)
  alignas(4) u8 LIGHT_DIR_COLOR[LIGHT_SIZE][LIGHT_COUNT]; // RGBA8 (duplicated) | Direction packed as s8 (duplicated)

  u32 TRI_COMMAND = {0}; // for RDPQ_Triangle
  s32 MATRIX_STACK_PTR = {0}; // current matrix stack pointer in RDRAM, set once during init

  // Fog settings: index 0/1 is the scale as a s16.16, index 2 the scale as a s16 int.
  // The last value is used as a limiter to prevent overflows.
  s16 FOG_SCALE_OFFSET[4] = {0, 0, 0, 32767};
  u16 RDPQ_TRI_BUFF_OFFSET = {0};
  u16 SCREEN_UVGEN_SCALE = {0};

  u8 UV_GEN_FUNCTION = {0}; // point to the current UV function to be used during vertex load
  u8 FACE_CULLING = {0}; // 0=cull front, 1=cull back, 2=no-culling
  u8 USE_FOG      = {0}; // 0=no-fog, 1=use-fog
  u8 ACTIVE_LIGHT_SIZE = {0}; // light count * light size
}

temp_state {

  // address of the clipping code to load in RDRAM
  // first byte (MSB) stores if th code is already loaded or not
  u32 CLIP_CODE_ADDR = {0};
  u32 CLIP_CODE_ORG_ADDR = {0}; // address of the original code (this overlay here)
  u16 CLIP_CODE_SIZE = {0}; // size to copy
  u16 CLIP_RA; // backup of a return address
}

// Libdragon functions
function RDPQ_Triangle_Send_Async(u32<$a0> ptrVert0, u32<$a1> ptrVert1, u32<$a2> ptrVert2, u32<$sp> cullDest);
function RDPQ_Triangle_Send_End();

// Packs +xyz & -xyz into a single byte
macro packClipCode(u32 res, u32 clipCode)
{
  res = clipCode & 0b0000'0111'0000'0111;
  u32 tmp = res >> 5; //  -zyx      +xyx
  res |= tmp;
}

// Same as packClipCode, inverts the clipcode to only use one operation later on
macro packClipCodeInverted(u32 res, u32 clipCode)
{
  res = clipCode & 0b0000'0111'0000'0111;
  u32 tmp = res >> 5; //  -zyx      +xyx
  res = res ~| tmp;
}

// Fractional 3D dot-product with two vectors at once, result is in 'res.x' and 'res.X'
macro dotXYZ(vec16 res, vec16 a, vec16 b)
{
  res:sfract = a * b;
  vec16 tmp:sfract = res + res.yyyyYYYY;
  res:sfract += tmp.zzzzZZZZ;
}

// 4D dot-product with two vectors at once, result is in 'res.x' and 'res.X'
macro dotXYZW(vec32 res, vec32 a, vec32 b)
{
  res = a * b;
  res += res.yywwYYWW;
  res += res.zzzzZZZZ;
}

// Loads currently active model matrix (premultiplied with proj. matrix) into registers
// This already duplicates it for 2-vector operations.
macro loadCurrentModelProjMat(vec32 mat0, vec32 mat1, vec32 mat2, vec32 mat3)
{
  u16 address = MATRIX_MVP;
  mat0 = load(address, 0x00).xyzwxyzw;
  mat1 = load(address, 0x10).xyzwxyzw;
  mat2 = load(address, 0x20).xyzwxyzw;
  mat3 = load(address, 0x30).xyzwxyzw;
}

// Loads currently active model matrix into registers
// This already duplicates it for 2-vector operations.
macro loadCurrentNormalMat(vec16 mat0, vec16 mat1, vec16 mat2)
{
  u16 address = MATRIX_NORMAL;
  mat0 = load(address, 0x00).xyzwxyzw;
  mat1 = load(address, 0x08).xyzwxyzw;
  mat2 = load(address, 0x10).xyzwxyzw;
}

// resolves a (potentially) segmented RDRAM address into a physical one
macro resolveSegmentAddr(u32 addrOut, u32 addrIn) {
  u32 segment = addrIn >> 24;
  segment = load(segment, SEGMENT_TABLE);
  addrOut = addrIn + segment;
}

#ifdef OVERLAY_CLIPPING
  #include "clipping.rspl"
#else

/**
 * Loads & transforms 3D vertices into the internal buffer, later to be used by triangles.
 * This fully prepares them to be used by RDPQ_Triangle, while still being able to
 * be clipped and transformed into screen-space again if needed.
 *
 * @param bufferSize size in bytes to load (@TODO: add offset too)
 * @param rdramVerts RDRAM address to load vertices from
 * @param bufferSize 2 u16 DMEM addresses, MSBs set where to DMA the input to, LSBs set where to store the result
 */
@Align(8)
command<4> T3DCmd_VertLoad(u32 bufferSize, u32 rdramVerts, u32 addressInOut)
{
  CLIPPING_CODE_TARGET: // marks the place where the clipping code can be loaded in to

  // load all vertices in a single DMA, processing them as the loop goes.
  // NOTE: the input vertex-size is smaller than the internal one, so we can't do it in place.
  // Instead, offset the buffer enough to not cause an overlap with read/writes on the same vertex.
  u32<$s4> prt3d = addressInOut >> 16;

  u32<$t0> copySize = bufferSize & 0xFFFF;
  u32 ptr3dEnd = prt3d + copySize;

  u32<$s0> dmaAddrRDRAM;
  resolveSegmentAddr(dmaAddrRDRAM, rdramVerts);
  dma_in_async(prt3d, dmaAddrRDRAM, copySize);

  vec32 mat0, mat1, mat2, mat3;
  loadCurrentModelProjMat(mat0, mat1, mat2, mat3);

  vec16 matN0, matN1, matN2;
  loadCurrentNormalMat(matN0, matN1, matN2);

  vec16 normMask = load(NORMAL_MASK_SHIFT, 0x00).xyzwxyzw;
  vec16 normShift = load(NORMAL_MASK_SHIFT, 0x08).xyzwxyzw;

  vec16 guardBandScale = load(CLIPPING_PLANES).xy;
  guardBandScale = guardBandScale.y;

  vec32 screenSize:sint = load(SCREEN_SCALE_OFFSET).xyzwxyzw;
  screenSize:sfract = 0;
  screenSize >>= 4;

  vec16 screenOffset = load(SCREEN_SCALE_OFFSET, 0x08).xyzwxyzw;
  vec16 fogScaleOffset = load(FOG_SCALE_OFFSET).xyzw;

  vec16 normScaleW = load(NORM_SCALE_W).xyzwxyzw;

  u32 ptrBuffA = addressInOut & 0xFFFF; // ptr to first output vertex
  u32 ptrBuffB = ptrBuffA + TRI_SIZE; // ptr to second output vertex

  u16 ptrLight = LIGHT_DIR_COLOR;

  u8 ptrLightEnd = load(ACTIVE_LIGHT_SIZE);
  ptrLightEnd += ptrLight;

  vec16 uvGenArgs;
  uvGenArgs.xy = load(UV_GEN_PARAMS).xy;
  uvGenArgs.XY = load(UV_GEN_PARAMS).xy;
  uvGenArgs.w = load(SCREEN_UVGEN_SCALE).x;

  // @TODO: racing the DMA is ~40us faster, doesn't work in ares, retest later again
  dma_await();

  // de-phased part of the loop to avoid stalls, this is also done at the end
  vec16 pos = load(prt3d, 0x00);
  vec16 norm = normMask & pos.wwwwWWWW;
  norm *= normShift;

  // Process all vertices and apply transformation & lighting.
  // This always handles 2 vertices at once, most sitting in one register.
  loop
  {
    LOOP_START:
    // Position & Normals
    vec32 posClip;
    vec16 color;

    u8 uvGenFunc = load(UV_GEN_FUNCTION);
    u8 useFog = load(USE_FOG);

    {
      // load & transform normals, this in not needed when no directional light is present
      // however, an if-statement + the lost ability for reordering is not worth it. (@TODO: do more tests)
      posClip:sfract = matN0:sfract  * norm.xxxxXXXX; // (assign to dummy value)
      posClip:sfract = matN1:sfract +* norm.yyyyYYYY;
      norm           = matN2:sfract +* norm.zzzzZZZZ;

      pos.w = load(CLIPPING_PLANES, 4).x; // loads "1"
      pos.W = load(CLIPPING_PLANES, 4).x;

      // object-space to clip-space
      mulMat4Vec8(mat0, mat1, mat2, mat3, pos, posClip);
      undef pos;

      // input vertex color
      color = load_vec_u8(prt3d, 0x10);
      vec16 lightColor = load_vec_u8(COLOR_AMBIENT); // light color, accumulates directional lights

      // directional
      vec16 lightDirVec  = load_vec_s8(ptrLight, 8);
      while(ptrLight != ptrLightEnd)
      {
        vec16 lightDirScale;
        dotXYZ(lightDirScale, norm, lightDirVec);

        vec16 lightDirColor = load_vec_u8(ptrLight);
        lightDirScale = lightDirColor:ufract * lightDirScale:ufract.xxxxXXXX;

        lightColor:sfract += lightDirScale;
        ptrLight += LIGHT_SIZE;
        lightDirVec = load_vec_s8(ptrLight, 8);
      }

      ptrLight = LIGHT_DIR_COLOR;
      color:sfract *= lightColor:ufract;
    }

    // calc. clipping codes (rejection & clip-prevention)
    u32 clipCodeA, clipCodeB, rejCodesA, rejCodesB;
    {
      vec32<$v02> clipPlaneW = guardBandScale * posClip.wwwwWWWW;

      // Clip code for clipping (incl. band-guard)
      u32 clipCodes = clip(posClip, clipPlaneW);
      clipCodeB = clipCodes >> 4;
      packClipCode(clipCodeA, clipCodes);
      packClipCode(clipCodeB, clipCodeB);

      // Clip-Code for rejection (no band-guard)
      u32 rejCodes = clip(posClip, posClip.wwwwWWWW);
      rejCodesB = rejCodes >> 4;
      packClipCodeInverted(rejCodesA, rejCodes);
      packClipCodeInverted(rejCodesB, rejCodesB);
    }

    posClip *= normScaleW:ufract;

    store(posClip.xyzw, ptrBuffA, VTX_ATTR_CLIPPOSi);
    store(posClip.XYZW, ptrBuffB, VTX_ATTR_CLIPPOSi);

    // now optimistically assume it's on-screen and conv. to screen-space
    posClip.w = invert_half(posClip).w;
    posClip.W = invert_half(posClip).W;

    // Fog
    {
      vec32 fog;

      // add offset, to avoid loads, int/fract are stored in the same vector
      fog:ufract = posClip + fogScaleOffset.z;
      fog:sint   = posClip + fogScaleOffset.y;
      fog *= fogScaleOffset:sint.x;

      vec16 fogMax = fogScaleOffset.w; // invert fog -> 0=no-fog, max=fog
      fog:sint = fogMax - fog:sint;

      if(useFog) {
        color.w = fog:sint.z; // store fog as alpha
        color.W = fog:sint.Z;
        //printf("%v: %v\n", fogScaleOffset.x, color.w);
      }
    }

    // backup clip-pos in case that clipping is required
    // also store inv-W here (in place of W)
    store(posClip.w, ptrBuffA, VTX_ATTR_INVWi);
    store(posClip.W, ptrBuffB, VTX_ATTR_INVWi);

    posClip *= posClip.wwwwWWWW;
    posClip *= screenSize;
    posClip:sint += screenOffset;

    vec16 uv = load(prt3d, 0x18).xyzw;
    prt3d += 0x20;

    @Barrier("pos-cc") store(posClip:sint.xyzw, ptrBuffA, VTX_ATTR_XY);
    @Barrier("pos-cc") store(posClip:sint.XYZW, ptrBuffB, VTX_ATTR_XY);

    store_vec_u8(color.x, ptrBuffA, VTX_ATTR_RGBA);
    store_vec_u8(color.X, ptrBuffB, VTX_ATTR_RGBA);

    @Barrier("pos-cc") store(clipCodeA:u8, ptrBuffA, VTX_ATTR_CLIPFLAGS);
    @Barrier("pos-cc") store(clipCodeB:u8, ptrBuffB, VTX_ATTR_CLIPFLAGS);

    @Barrier("pos-cc") store(rejCodesA:u8, ptrBuffA, VTX_ATTR_REJFLAGS);
    @Barrier("pos-cc") store(rejCodesB:u8, ptrBuffB, VTX_ATTR_REJFLAGS);

    vec16 oldNorm = norm;

    pos = load(prt3d, 0x00); // load next pos
    norm = normMask & pos.wwwwWWWW;
    norm *= normShift;

    // Normal UVs, keep as is
    if(!uvGenFunc) {
      store(uv.xy, ptrBuffA, VTX_ATTR_ST);
      store(uv.zw, ptrBuffB, VTX_ATTR_ST);

      // to avoid a double-jump, check the loop-end here directly
      ptrBuffA += TRI_SIZE_2;
      ptrBuffB += TRI_SIZE_2;

      if(prt3d == ptr3dEnd)goto RSPQ_Loop;
      goto LOOP_START;
    }
    // Spherical UVs, this generates UVs based on the normal vector

    // this factor approximates a UV offset that would occur due to perspective / a different angle to the camera
    // since that is expensive, rather calc. a scalar based on the screen-space pos
    // and tone it down depending on the normals Z factor (aka how tilted away from the camera it is)
    vec16 uvOffsetFactor = posClip:sint - screenOffset; // move back to center=0
    uvOffsetFactor *= uvGenArgs.w; // undo screen-space conversion into a normalized factor
    uvOffsetFactor:sfract *= oldNorm.zzzzZZZZ; // the less aligned to the camera, the less offset
    uvOffsetFactor:sfract *= uvGenArgs.x; // scale down to texture size

    uv:sfract = oldNorm * uvGenArgs;
    uv += uvGenArgs.x;
    uv += uvOffsetFactor;

    ptrBuffA += TRI_SIZE_2; // delay stall for uv by subtracting in the store
    ptrBuffB += TRI_SIZE_2;
    store(uv.xy, ptrBuffA, VTX_ATTR_ST, -TRI_SIZE_2);
    store(uv.XY, ptrBuffB, VTX_ATTR_ST, -TRI_SIZE_2);

  } while(prt3d != ptr3dEnd)
}

/**
 * Sets current screen-size in pixel.
 * @param guardBandFactor s16 with the guard multiplier (should be 1-4)
 * @param screenScale screen-size * 2
 * @param depthAndWScale fractional 16bit scales to normalize W and depth
 */
command<1> T3DCmd_SetScreenSize(s8 guardBandFactor, u32 screenOffsetXY, u32 screenScaleXY, u32 depthAndWScale)
{
  store(depthAndWScale:u32, SCREEN_SCALE_OFFSET, 0x04); // (writes garbage into W, saves a shift)
  store(screenScaleXY, SCREEN_SCALE_OFFSET, 0x00);
  store(screenOffsetXY, SCREEN_SCALE_OFFSET, 0x08);

  store(depthAndWScale:s16, NORM_SCALE_W, 6);
  store(depthAndWScale:s16, NORM_SCALE_W, 8);
  store(depthAndWScale:s16, NORM_SCALE_W, 10);
  store(depthAndWScale:s16, NORM_SCALE_W, 12);

  // guard-band multiplier (W value of the clipping plane, integer)
  guardBandFactor &= 0xF;
  s8 guardBandFactorNeg = ZERO - guardBandFactor;

  store(guardBandFactor,    CLIPPING_PLANES, 3); // +X Plane
  store(guardBandFactor,    CLIPPING_PLANES, 7); // +Y Plane
  //store(guardBandFactor,    CLIPPING_PLANES, 11); // +Z Plane
  store(guardBandFactorNeg, CLIPPING_PLANES, 15); // -X Plane
  store(guardBandFactorNeg, CLIPPING_PLANES, 19); // -Y Plane

  // prepare additional inverse screen-scale, this is used for generated UVs
  {
    vec32 screenSize:sfract = 0;
    s16 screenScaleX = screenScaleXY >> 16;
    screenSize:sint.x = screenScaleX;
    screenSize.x = invert_half(screenSize).x;

    vec16 scaleFactor = screenSize:sfract >> 2;
    scaleFactor += 1;
    store(scaleFactor.x, SCREEN_UVGEN_SCALE);
  }
   //printf("\033[2J"); // clear console
}

/**
 * Sets the range of fog.
 *
 * @param fogScale 16.16 scale factor
 * @param fogOffset 16.16 offset
 */
command<10> T3DCmd_SetFogRange(s16 fogScale, s32 fogOffset)
{
  store(fogScale,  FOG_SCALE_OFFSET, 0x00);
  store(fogOffset, FOG_SCALE_OFFSET, 0x02);
}

/**
 * Enables or disables fog.
 * @param enabled 1=enabled, 0=disabled
 */
command<11> T3DCmd_SetFogState(u8 enabled)
{
  store(enabled, USE_FOG);
}

/**
 * Sets a light (ambient or directional)
 *
 * @param address ambient or dir. light address (DMEM)
 * @param rgba8 color RGBA8
 * @param dirXYZ normalized packed direction, ignored if zero
 */
command<5> T3DCmd_LightSet(u32 addr, u32 rgba8, u32 dirXYZ)
{
  store(rgba8, addr, 0);

  if(dirXYZ) {
    store(dirXYZ, addr, 8);
    store(dirXYZ, addr, 12);
  }

  store(rgba8, addr, 4);
}

/**
 * Sets the number of active directional lights.
 * @param count range: 0 - LIGHT_COUNT
 */
command<9> T3DCmd_LightCount(u8 count)
{
  store(count, ACTIVE_LIGHT_SIZE);
}

/**
 * Sets various render-mode settings.
 * @param culling for RDPQ_Triangle, 0=front, 1=back, >1=none
 * @param triCommand for RDPQ_Triangle
 */
command<6> T3DCmd_RenderMode(u8 culling, u32 triCommand) {
  store(culling, FACE_CULLING);

  // Mipmap setting (pulled out from RDPQ_Triangle)
  u8 mipmap = load(RDPQ_OTHER_MODES);
  mipmap &= 0x38;
  triCommand |= mipmap;

  store(triCommand, TRI_COMMAND);
}

/**
 * Multiplies two matrices in memory.
 *
 * @param addrOut destination pointer
 * @param addrMatL pointer to left matrix
 * @param addrMatR pointer to right matrix
 */
function mulMat4Mat4(u32<$s2> addrOut, u32<$s3> addrMatL, u32<$s4> addrMatR)
{
  vec32 matL0 = load(addrMatL, 0x00).xyzwxyzw;
  vec32 matL1 = load(addrMatL, 0x10).xyzwxyzw;
  vec32 matL2 = load(addrMatL, 0x20).xyzwxyzw;
  vec32 matL3 = load(addrMatL, 0x30).xyzwxyzw;

  vec32 matR01, matR23;

  matR01.xyzw = load(addrMatR, 0x00).xyzw;
  matR01.XYZW = load(addrMatR, 0x10).xyzw;
  matR23.xyzw = load(addrMatR, 0x20).xyzw;
  matR23.XYZW = load(addrMatR, 0x30).xyzw;

  vec32 tmp;
  tmp    = matL0  * matR01.xxxxXXXX;
  tmp    = matL1 +* matR01.yyyyYYYY;
  tmp    = matL2 +* matR01.zzzzZZZZ;
  matR01 = matL3 +* matR01.wwwwWWWW;

  tmp    = matL0  * matR23.xxxxXXXX;
  tmp    = matL1 +* matR23.yyyyYYYY;
  tmp    = matL2 +* matR23.zzzzZZZZ;
  matR23 = matL3 +* matR23.wwwwWWWW;

  store(matR01.xyzw, addrOut, 0x00);
  store(matR01.XYZW, addrOut, 0x10);
  store(matR23.xyzw, addrOut, 0x20);
  store(matR23.XYZW, addrOut, 0x30);
}

/**
 * Multiplies a matrix with a 3D-vector.
 * This assumes a matrix duplicated in each register to
 * multiply 2 different vectors in one register at the same time.
 */
macro mulMat4Vec8(
  vec32 mat0, vec32 mat1, vec32 mat2, vec32 mat3,
  vec16 vec, vec32 out
) {
  out = mat0  * vec.xxxxXXXX;
  out = mat1 +* vec.yyyyYYYY;
  out = mat2 +* vec.zzzzZZZZ;
  out = mat3 +* vec.wwwwWWWW;
}

/**
 * Normalize a matrix vector (column) in memory and saves it as a fraction.
 * This is used to normalize the normal matrix.
 *
 * @param addrIn vector input address (s16.16 format)
 * @param addrOut vector output address (s0.16 format)
 */
function normalizeMatrixVector(u32<$s4> addrIn, u32<$t1> addrOut)
{
  vec32 v = load(addrIn, 0x00).xyzw;

  // get vector length
  vec32 vLenInv = v * v;
  vec32 tmp = vLenInv + vLenInv.yyyyYYYY;
  vLenInv   = vLenInv + tmp.zzzzZZZZ;

  // inverse of the length
  vLenInv.w = invert_half_sqrt(vLenInv).x;
  vLenInv >>= 9;

  v *= vLenInv.wwwwWWWW; // normalize
  v:sfract += v:sfract; // prevent over/underflow

  store(v:sfract.xyzw, addrOut, 0x00);

  addrIn += 0x10;
  addrOut += 0x8;
}

/**
 * Manages the matrix stack, implements 'push'/'pop' as well as 'set'.
 * The actual stack itself is held in RDRAM, only the current matrix is in DMEM.
 *
 * @param stackAdvance byte 0  : (internal)
 *                     byte 1-2: bytes to advance the stack pointer as an s16
 *                     byte 3  : flags (1=mul, 2=only advance)
 * @param addressMat RDRAM address to load matrix from
 */
command<2> T3DCmd_MatrixStack(s32 stackAdvance, u32 addressMat)
{
  #define MATRIX_TEMP_MV  CLIP_BUFFER_TMP
  #define MATRIX_TEMP_MUL CLIP_BUFFER_RESULT
  u32<$s4> dmaDest;

  u16 doMultiply = stackAdvance & 0b01;
  u16 onlyStackMove = stackAdvance & 0b10;

  stackAdvance:s16 = load_arg(1); // re-load from args to get sign extension

  s32 stackPtr = load(MATRIX_STACK_PTR);
  stackPtr += stackAdvance;
  store(stackPtr, MATRIX_STACK_PTR);

  // only move the stack pointer, can be used to prepare following matrix_set calls
  if(onlyStackMove)exit;
  dmaDest = MATRIX_TEMP_MV; // load new matrix
  resolveSegmentAddr(addressMat, addressMat);

  // stackAdvance less than zero -> matrix pop, load matrix from stack
  if(stackAdvance < 0)addressMat = stackPtr;
  u32<$s0> addrRDRAM = addressMat & 0xFFFFFF;

  dma_in(dmaDest, addrRDRAM, MATRIX_SIZE);
  u32<$t1> normOut = MATRIX_NORMAL;

  // if we advanced the stack, we need to multiply by the previous matrix
  if(doMultiply) {
    // load the mat. to multiply with from the stack...
    dmaDest = MATRIX_TEMP_MUL;
    addrRDRAM = stackPtr -  MATRIX_SIZE;
    dma_in(dmaDest, addrRDRAM, MATRIX_SIZE);

    // ...then multiply and store back top the same pos. in DMEM
    u32<$s2> mulDest = MATRIX_TEMP_MV;
    u32<$s3> mulLeft = MATRIX_TEMP_MUL;
    dmaDest = MATRIX_TEMP_MV;
    mulMat4Mat4(mulDest, mulLeft, dmaDest);
  }

  // save calc. matrix back to the stack
  addrRDRAM = stackPtr;
  dma_out(dmaDest, addrRDRAM, MATRIX_SIZE); // async

  // now grab the normal matrix and store it in a special slot.

  u32<$s2> mulDest = MATRIX_MVP;
  normalizeMatrixVector(dmaDest, normOut);
  u32<$s3> mulLeft = MATRIX_PROJ;
  normalizeMatrixVector(dmaDest, normOut);
  normalizeMatrixVector(dmaDest, normOut);
  undef dmaDest;

  // ...followed by applying the projection matrix, storing it in a special slot too.
  // Together, these two special slots are used for vertex transformation later on.
  u32<$s4> mulRight = MATRIX_TEMP_MV;
  mulMat4Mat4(mulDest, mulLeft, mulRight);

  #undef MATRIX_TEMP_MV
  #undef MATRIX_TEMP_MUL
}

/**
 * Sets a new projection matrix.
 * @param addressMat RDRAM address to load matrix from
 */
command<8> T3DCmd_MatProjectionSet(u32 addressMat) {
  u32<$s0> addrRDRAM = addressMat & 0xFFFFFF;
  dma_in(MATRIX_PROJ, addrRDRAM, 0x40);
}

/**
 * Stores a 32-bit word at an arbitrary address in DMEM.
 * This can be used to set segment addresses.
 * @param DMEM address in LSB 16 bits
 * @param value value to store
 */
command<3> T3DCmd_SetWord(u16 addrDMEM, u32 value) {
  store(value, addrDMEM);
}

/**
 * Sets the UV generation function.
 * @param uvFunc function address in IMEM
 * @param params user-defined parameters (2x u16 value)
 */
command<7> T3DCmd_SetUVGen(u8 uvFunc, u32 params) {
  store(uvFunc, UV_GEN_FUNCTION);
  store(params, UV_GEN_PARAMS);
}


/**
 * Draws a triangle to the screen, if necessary also performs clipping.
 *
 * @param vert0 16-LSB contain DMEM address for the first vertex
 * @param vert1 LSB/MSB contain DMEM address for the second + third vertex
 */
command<0> T3DCmd_TriDraw(u32 vert0, u32 vert1)
{
  //asm("emux_trace_start"); //asm("emux_trace_stop");

  // Note: vert1 & vert2 are switched, this avoids an additional instruction here.
  // We can't switch them on the CPU, as RDPQ_Triangle loads them from DMEM, so the order is different
  u32<$a2> vert2 = vert1 >> 16;

  {
    u32<$v1> vertAddr = get_cmd_address(2); // where to load the vertex pointers from
    u32<$sp> rejectDest = RSPQ_Loop; // jump-target for rejected/culled tris

    RDPQ_Triangle_Send_Async(vert0, vert1, vert2, rejectDest);
    u16 currOffset = load(RDPQ_TRI_BUFF_OFFSET);

    if(vertAddr == 0)
    {
      // if a triangle was generated, change the offset to swap output-buffers
      // the DMA is still active at this point, so we can only re-use it after a next send or sync
      currOffset ^= RDP_CMD_MAX_SIZE; // note: overflows into the next buffer
      store(currOffset, RDPQ_TRI_BUFF_OFFSET);
      exit;
    }

    // reload vertex indices, 'RDPQ_Triangle_Send_Async' may have modified them
    vert2:u16 = load_arg(0x06);
    vert1:u16 = load_arg(0x04);

    // we need to clip now, first wait for any triangle still in flight
    // this is necessary as clipping uses both buffers used as outputs
    RDPQ_Triangle_Send_End(); // <- resets 'RDPQ_TRI_BUFF_OFFSET' to zero

    vert0:u16 = load_arg(0x02); // a0 gets overwritten by 'RDPQ_Triangle_Send_End'
  }

  // Now we need to perform clipping, the code for this is in a separate overlay.
  // Check if already loaded, or load it in here otherwise.
  // It will stay until the next tri-sync command (or if a different overlay is executed)
  u8 clipLoaded = load(CLIP_CODE_ADDR);
  if(!clipLoaded)
  {
    u32<$s4> targetImem = CLIPPING_CODE_TARGET;
    u32<$s0> codeAddr = load(CLIP_CODE_ADDR);
    u16<$t0> codeSize = load(CLIP_CODE_SIZE);

    // mark as loaded, 'codeSize' is guaranteed to be non-zero in the LSB
    store(codeSize:u8, CLIP_CODE_ADDR);

    //printf("clip: %x, s:%x -> %x\n", codeAddr, codeSize, targetImem);
    dma_in(targetImem, codeAddr, codeSize);
  }

  DO_CLIPPING:
    RA:u16 = RSPQ_Loop;
    store(RA:u16, CLIP_RA);
    goto CLIPPING_CODE_TARGET;
}

/**
 * Syncs triangle calls, wrapper for 'RDPQ_Triangle_Send_Async'.
 */
command<12> T3DCmd_TriSync()
{
  u8 clipLoaded = load(CLIP_CODE_ADDR);
  u32<$s4> targetImem = CLIPPING_CODE_TARGET; // (delay-slot filler)

  // no clipping happened, just sync the triangle
  if(!clipLoaded)goto RDPQ_Triangle_Send_End;

  u32<$s0> codeAddr = load(CLIP_CODE_ORG_ADDR);
  u16<$t0> codeSize = load(CLIP_CODE_SIZE);

  //printf("main: %x, s:%x -> %x\n", codeAddr, codeSize, targetImem);
  dma_in_async(targetImem, codeAddr, codeSize); // RDPQ_Triangle_Send_End waits for DMA

  RA = RSPQ_Loop;
  store(ZERO:u8, CLIP_CODE_ADDR); // mark as not loaded
  goto RDPQ_Triangle_Send_End;
}

#endif



